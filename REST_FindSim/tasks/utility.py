import re

BEDUGFLAG = True

# Result data structure:
# Atfer running the task, return this to front-end/client
class FindSimResult():

    def __init__(self):
        self.score = 0.0
        self.time = 0.0
        self.figure = ""
        # When something is wrong,
        # front-end/client can get info from this
        self.error = ""

    def set_score(self, _score):
        self.score = _score

    def set_time(self, _time):
        self.time = _time

    def set_figure(self, _figure):
        self.figure = _figure

    def set_error(self, _error):
        self.error = _error

    def has_error(self):
        return not self.error == ''

class OptimizationResult():

    def __init__(self):
        self.score = 0.0
        self.time = 0.0
        self.model = ""
        self.parameters = []
        # When something is wrong,
        # front-end/client can get info from this
        self.error = ""

    def add_parameter(self, _param = str):
        self.parameters.append(_param)

    def set_score(self, _score):
        self.score = _score

    def set_time(self, _time):
        self.time = _time

    def set_model(self, _model):
        self.model = _model

    def set_error(self, _error):
        self.error = _error

    def has_error(self):
        return not self.error == ''

# Parse the output generated by interface_FindSim.py
# If the output pattern is changed, change the code here
# for adjustment.
def parse_output(output = str, error = str, output_type = str):
    print(output)
    if output_type == 'Calculation':
        t_result = FindSimResult()
    elif output_type == 'Optimization':
        t_result = OptimizationResult()
    else:
        raise AssertionError("Output type not found!")

    errormsg = ""

    # Get result from stdout output strings
    # Check if there is error or exception
    if error != ""\
    or re.search('score', output, re.I) == None:
    # or re.search('error', output, re.I) != None:
        # Error happens, parse output to get the error messege
        if re.search('error',output, re.I) != None:
            p1 = re.compile(r'[a-zA-Z0-9.]*error.*', re.I)
            errors = p1.findall(output)
            errormsg += errors[-1] + '  '
        if re.search('exception',output, re.I) != None:
            p2 = re.compile(r'[a-zA-Z0-9]*exception.*', re.I)
            errors = p2.findall(output)
            errormsg += errors[-1] + '  '
        if re.search('error',error, re.I) != None:
            p3 = re.compile(r'[a-zA-Z0-9.]*error.*', re.I)
            errors = p3.findall(error)
            errormsg += errors[-1] + '  '
        if re.search('exception',error, re.I) != None:
            p4 = re.compile(r'[a-zA-Z0-9]*exception.*', re.I)
            errors = p4.findall(error)
            errormsg += errors[-1] + '  '
        if errormsg == "":
            errormsg += output+error
        t_result.set_error(errormsg)

        return t_result

    # No error, parse the getoutput
    if output_type == 'Calculation':
        # locate '[Fgure]'
        f_loc = output.find('[Figure]')
        res_output = output[0:f_loc]
        res_figure = output[f_loc+len('[Figure]'):]
        # locate 'Score'
        s_loc = res_output.find('Score')
        res_output = res_output[s_loc:]
        outs = res_output.split(' ')
        # get score and time
        t_result.set_score(outs[2])
        t_result.set_time(outs[6])
        t_result.set_figure(res_figure)

    elif output_type == 'Optimization':
        outs = output.split('\n')
        i = 0
        # parameters
        while i < len(outs):
            line = outs[i]
            if line and line[0] != '.':
                t_result.add_parameter(line)
                i += 1
            else:
                break
        # time
        while i < len(outs):
            line = outs[i]
            if line and line[0] == '-':
                words = line.split(' ')
                t_result.set_time(words[3])
                break
            i += 1
        # score
        t_result.set_score(outs[len(outs)-3])
        # optimized_model
        # set in run_optimization()
    else:
        raise AssertionError("output type not found!")

    return t_result

def decode_bytes(content):
    if content == None:
        return ""
    else:
        return content.decode()
